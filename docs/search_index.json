[
["index.html", "Measuring Precision between Point Clouds based on Different Parameters Chapter 1 Introduction", " Measuring Precision between Point Clouds based on Different Parameters Izaak Cooper 2020-12-16 Chapter 1 Introduction The process of creating three dimensional (3D) models from a collection of two dimensional (2D) images is called photogrammetry. Photogrammetry has been used to model small historical artifacts, structures, and topography. Drones have become an important tool in photogrammetry and topographic modeling in recent years as the combination of these tools provides a relatively cheap alternative to LiDAR when characterizing specific sites. Topographic modeling is useful in multiple fields, and is becoming more widely used in water resources. One specific type of topographic modeling is bathymetry mapping. Bathymetry mapping is topographic modeling of the floor of oceans, seas, lakes, and reservoirs. Bathymetry mapping at reservoirs is usually accomplished through the use of sonar technology, but if the site is not inundated photogrammetry can be used to model the floor of a reservoir. Sonar cannot record the shallower depths of a reservoir and most reservoirs are not at full pool year-round. Since reservoirs are not always at full pool and shallower depths cannot be modeled via sonar some data is missing and a full pool bathymetric map cannot be created. A photogrammetry survey using drones could “finish” the sonar data by modeling the shoreline. This book will test the efficacy of shoreline modeling and the issues associated with modeling shorelines using photogrammetry and drones. "],
["intro.html", "Chapter 2 Literature", " Chapter 2 Literature Photogrammetry is an accurate and useful method for generating topographic models. In recent years, Structure from Motion (SfM) algorithms have used imagery from small Unmanned Aerial Vehicles (sUAVs) to generate accurate topographical models. This is a more cost-effective method for generating topography for small areas compared to traditional aerial photogrammetric methods. Extending these general terrain models, recent studies have demonstrated the use of sUAVs and SfM technology in the field of water resources (Alvarez et al. 2018; Casella et al. 2014; Erena et al. 2019; Huizinga and Heimann 2018; Javernick, Brasington, and Caruso 2014; Langhammer et al. 2017; Templin, Popielarczyk, and Kosecki 2018; Zanutta, Lambertini, and Vittuari 2020). The majority of this work revolves around using UAVs data collection methods to create accurate three-dimensional (3D) topographic models. For example, researchers have monitored braided river channels using photogrammetry (Javernick, Brasington, and Caruso 2014) and sUAV images have been used to capture detailed orthoimages of river streambeds and process these images to accurately estimate the particle size distribution of streambed sediments (Langhammer et al. 2017). Light Detection and Ranging (LiDAR) has been used in conjunction with sUAV technology to create topo-bathymetric models (Mandlburger et al. 2020). LiDAR is a tool that could be used in place of SfM photogrammetry to model shorelines, although LiDAR surveys tend to be more costly as they generally require larger UAVs and more costly sensors. SfM-based photogrammetry has been used to supplement standard sonar collections by collecting data in shallow depths that sonar technology cannot accurately model (Alvarez et al. 2018); our method extends this research to above-water areas. Others have used sUAV-based methods to monitor changes in coastline due to wave runup (Casella et al. 2014) and evaluate water resource infrastructure such as spillways (Arce et al. 2020). Most sUAV based surveys use a pre-determined grid format for flight patterns over areas where the width and length are of similar magnitude, thus most of the current literature on ground control point spacing discuss and address a grid format for flight patterns and ground control (GCP) placement (Martínez-Carricondo et al. 2018; Remondino et al. 2011). Ground control points are targets set out with known GPS locations before the flight of the UAV that then tie a photogrammetry model (point cloud model) to reality. Although gridded flights are most common for collecting over typical sites, some jobs require long, thin flight paths such as the bathymetric surveys discussed in my project, roads, road cut slopes, levees, or canals (Carvajal-Ramírez, Agüera-Vega, and Martínez-Carricondo 2016). The issue of GCP spacing and orientation along long corridors has been research with details of the expected accuracy with different GCP spacing and orientation along a relatively long stretch of road reported (Ferrer-González et al. 2020). My project deals with a similar flight pattern to that presented here, but roads generally follow a regular line, without significant changes, while some reservoir shorelines are erratic and have a more fractal geometry. Long, erratic, shorelines also pose an issue during fieldwork as placing many GCPs may be unrealistic, time consuming, or costly as parts of the shoreline could be inaccessible. The minimal need of GCPs has been researched. The current literature on the precision of point cloud models based on GCP spacing suggests that horizontal (X-, Y-) accuracy is more easily achieved than vertical (Z-) accuracy (Skarlatos et al., n.d.). Vertical (Z-) accuracy is of the utmost important when creating bathymetric maps as storage capacity curves rely on volumetric calculations of the calculated point cloud, thus my project will look into the precision in the X-, Y-and Z-direction of point clouds produced with varying amounts of GCPs along a shoreline, with a special emphasis on the Z-direction precision. Other factors will be tested to find how those factors effect the shoreline model, including masking water from the images and the effects of mistagged ground control points. References "],
["methodology.html", "Chapter 3 Methodology 3.1 Control Dataset 3.2 Test Datasets", " Chapter 3 Methodology The lidR package can be installed from CRAN or Github. The lidR package allows for the plotting and analysis of an .las point cloud file. This .las file is a collection of 3-D coordinate points. The number of points in an .las photogrammetry file usually has more than a million points.The point cloud files used in this book have been filtered to five foot intervals as they will be used in bathymetry maps that don’t necessitate the finer details found in the original point clouds. The code shown below summarizes the control point cloud that will be used as a reference as it provides the best physical representation of Newcastle Dam that we could produce. We then tested different factors and observed the visual and statistical differences between the point cloud models to determine which factors are important in creating an accurate shoreline model. The test datasets and their information are shown below the control dataset. 3.1 Control Dataset The control dataset used a single ground control point in the center of the dam. The ground control point ties the topographic model to actual GPS coordinates in three-dimensional space. All available tools were used in the creation of the control point cloud. Three test point clouds were then created with the omission or alteration to one of the tools used in the photogrammetry process. We then compare the different point clouds to identify if the tools are truly necessary in creating an accurate topographic model of the shoreline. library(lidR) Control &lt;- readLAS(&quot;data/11-30-20-Correct.las&quot;) Mistagged &lt;- readLAS(&quot;data/11-30-20-Mistag.las&quot;) NoGCP &lt;- readLAS(&quot;data/11-30-20-NoGCP.las&quot;) NoMask &lt;- readLAS(&quot;data/11-30-20-NoMagicWand.las&quot;) library(rgl) knitr::knit_hooks$set(webgl = hook_webgl) plot(Control) You must enable Javascript to view this page properly. 3.2 Test Datasets Three different datasets were created to test if certain tools should be used to create the final point cloud topography models.If these tools didn’t change the datasets in a statistically significant manner then these tools could be omitted, saving time and money in the surveying process. The first test dataset portrays the differences that would occur in the topographic point cloud if a ground control point is incorrectly tagged in one of the 8 photos by 2 meters. Mistagging of ground control points is a common error in the photogrammetry process and the changes in the final point cloud are not immediately obvious. If we could characterize the difference in the point cloud due to the mistagging of a ground control point it would allow for an easier time troubleshooting model production. A plot of the mistagged ground control points is shown below. Although obvious differences cannot be seen in the plot shown below, a deeper analysis is done in the Results section. plot(Mistagged) You must enable Javascript to view this page properly. The second dataset was produced without tagging any ground control points. This means that the GPS from the drone is the only thing tying the model to reality. The most time consuming part of a photogrammetry survey of a shoreline is the placement of ground control points. Photogrammetry surveys would be much less costly if an accurate topographic model can be produced without the use of ground control points. Although obvious differences cannot be seen in the plot shown below, a deeper analysis is done in the Results section. plot(NoGCP) You must enable Javascript to view this page properly. The third dataset was prodcued without masking the water in each of the photos that were captured. Photogrammetry “matches” common features in photographs that were taken with overlapping topography. Water has features that change due to light refraction and reflection which obscures the alignment of the camera positions that are determined in the photogrammetry software. If the model changes too much due to these erroneous tie points then surveyors must mask out water in photos to create an accurate topographic model. Although obvious differences cannot be seen in the plot shown below, a deeper analysis is done in the Results section. plot(NoMask) You must enable Javascript to view this page properly. "],
["results.html", "Chapter 4 Results", " Chapter 4 Results As seen in the methodology section, all four las point clouds are relatively accurate in that it accurately models the shoreline, and the details of the shoreline are accurately portrayed in relation to the other points. Violin plots are a type of plot that can show systematic changes in the collection of points in the point clouds. A violin plot is a type of box and whisker plot that displays the density of point along a given parameter (amount of points in the X-, Y- and Z- direction are used below). The code below defines the data and then creates violin plots comparing the test datasets with the control dataset. When the violin plot of a test dataset mirrors that of the control dataset the test dataset is not significantly different in that parameter. The three violin plots below represent the distribution of X-, Y- and Z- values in the different las datasets.As seen below, each of the violin plots is relatively accurate compared to the control dataset with very similar violin shapes. The No Ground Control elevation data is inaccurate and is uniformly moved downwards compared to the control dataset.This violin is more evenly spread than the other datasets. The X- and Y- violin plots of NoGCP are also longer than the other plots. #Reading LAS Files library(lidR) Control &lt;- readLAS(&quot;data/11-30-20-Correct.las&quot;) Mistagged &lt;- readLAS(&quot;data/11-30-20-Mistag.las&quot;) NoGCP &lt;- readLAS(&quot;data/11-30-20-NoGCP.las&quot;) NoMask &lt;- readLAS(&quot;data/11-30-20-NoMagicWand.las&quot;) # Defining Variables ZControl &lt;- Control@data[[&quot;Z&quot;]] XControl &lt;- Control@data[[&quot;X&quot;]] YControl &lt;- Control@data[[&quot;Y&quot;]] ZMistagged &lt;- Mistagged@data[[&quot;Z&quot;]] XMistagged &lt;- Mistagged@data[[&quot;X&quot;]] YMistagged &lt;- Mistagged@data[[&quot;Y&quot;]] ZNoGCP &lt;- NoGCP@data[[&quot;Z&quot;]] XNoGCP &lt;- NoGCP@data[[&quot;X&quot;]] YNoGCP &lt;- NoGCP@data[[&quot;Y&quot;]] ZNoMask &lt;- NoMask@data[[&quot;Z&quot;]] XNoMask &lt;- NoMask@data[[&quot;X&quot;]] YNoMask &lt;- NoMask@data[[&quot;Y&quot;]] The Violin plot below displays the distribution of point along the Z-axis, or elevation. The elevation accuracy is of the utmost importance in bathymetry mapping as bathymetry maps are often used to calculate storage capacity (volume) of a reservoir. The Violin plot below shows that having no GCPs during model creation affects both the shape of the violin plot as well as shifting the entire violin plot in the z-direction. This means that having no GCP in the model is unacceptable as it led to a ~10ft shift in the point cloud model. # Elevation Violin Plot library(vioplot) vioplot(ZControl, ZMistagged, ZNoGCP, ZNoMask, names=c(&quot;Control&quot;, &quot;Mistagged&quot;, &quot;NoGCP&quot;, &quot;NoMask&quot;), col=&quot;gold&quot;) title(&quot;Violin Plots Elevation&quot;) The two violin plots below shows the distribution of points in the point clouds on the X- and Y-axis. There is no considerable difference between the three models which shows that the three factors don’t cause major changes in the X- and Y- axis. Although there doesn’t seem to be any large systematic difference in the three models, a closer look at the 3D models found in methods shows that the NoMask model has a “shoreline” that extends further into the water than the other models. This extension in shoreline is because the software is trying to model the water as shoreline. In bathymetry mapping, the shoreline point cloud and sonar point cloud should have a smooth transition from one to the other. The water being modeled in the NoMask point cloud keeps the two models from having this smooth transition, therefore the masking tool should be used to mask water out of the images. # X Violin Plot library(vioplot) vioplot(XControl, XMistagged, XNoGCP, XNoMask, names=c(&quot;Control&quot;, &quot;Mistagged&quot;, &quot;NoGCP&quot;, &quot;NoMask&quot;), col=&quot;gold&quot;) title(&quot;Violin Plots X&quot;) # X Violin Plot library(vioplot) vioplot(YControl, YMistagged, YNoGCP, YNoMask, names=c(&quot;Control&quot;, &quot;Mistagged&quot;, &quot;NoGCP&quot;, &quot;NoMask&quot;), col=&quot;gold&quot;) title(&quot;Violin Plots Y&quot;) "],
["discussion.html", "Chapter 5 Discussion", " Chapter 5 Discussion The use of violin plots provides a quick and clean way to see gross differences between las point clouds. This method is good enough for the purpose of finding differences in point clouds that will be used in creating bathymetry maps as bathymetry maps need to be accurate in the Z-direction and need only be accurate to about a foot since water volumes are calculated in the relatively large acre-feet measurement.The Results section shows that there are no significant differences from the control model when there is a mistagged GCP or the water isn’t masked from the images. This suggests that these two steps in the photogrammetry process could be skipped in order to create a less costly and more efficient workflow. Ground control points must be present because there were large errors in the Z-direction when ground control points were not used. Although the violin plots are a good way to examine this set of data, violin plots may not be useful in the comparing other sets of las data as the projects other las project are used for may require models accurate to a few centimeters. Because of this, we also inspected the interactive models in the methods section to check and see if the test models showed significant differences. The NoMask set included water in the point cloud which isn’t acceptable. This means that masking water in photos is pertinent before creating the point cloud and that this step should be included. "],
["references.html", "References", " References "]
]
